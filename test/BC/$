// File       : NeumannTest.cpp
// Created    : Thu May 27 2021 10:57:10 AM (+0200)
// Author     : Ivan Mihajlovic Milin
// Description: Neumann boundary test
// Copyright 2021 ETH Zurich. All Rights Reserved.

#include "Cubism/Block/FieldLab.h"
#include "Cubism/Block/Field.h"
#include "Cubism/Grid/Cartesian.h"
#include "Cubism/Mesh/StructuredUniform.h"

#include "Neumann.h"

#include <string>
#include <gtest/gtest.h>

namespace
{
using namespace Cubism;

// test non-tensorial Neumann boundary conditions
template <size_t dir, typename FieldLab, typename IRange, typename MIndex>
void check(const FieldLab &lab,
           const IRange &range,
           MIndex start,
           const MIndex end,
           const typename FieldLab::DataType v0,
           const typename FieldLab::DataType v1)
{
    MIndex Nslab(range.getExtent());
    Nslab[dir] = 3;
    const IRange halo_slab(Nslab);
    start[dir] = -3;
    for (const auto &p : halo_slab) {
        EXPECT_EQ(lab[p + start], v0);  // side = 0
    }
    start[dir] = end[dir];
    for (const auto &p : halo_slab) {
        EXPECT_EQ(lab[p + start], v1);  // side = 1
    }
}

TEST(BC, Neumann)
{
    using IRange = Core::IndexRange<3>;
    using MIndex = typename IRange::MultiIndex;
    using Mesh = Mesh::StructuredUniform<double, IRange::Dim>;
    using Grid = Grid::Cartesian<double, Mesh, EntityType::Cell, 0>;
    using DataType = typename Grid::DataType;
    using FieldType = typename Grid::BaseType;
    using FieldLab = Block::FieldLab<typename FieldType::FieldType>;
    using Stencil = typename FieldLab::StencilType;
    using BCVector = typename FieldType::BCVector;
    using BC = BC::Neumann<FieldLab>;

    const MIndex nblocks(1);
    const MIndex block_cells(32);
    Grid field(nblocks, block_cells);

    for (auto bf : field) {
        const Mesh &bm = bf->getState().mesh;
        for (auto ci : bm[EntityType::Cell]) {
            bf[ci] = 1.0;
        }
    }

    BCVector bcv;
    bcv.push_back(new BC(0, 0, 0));
    bcv.push_back(new BC(0, 1, 0));
    bcv.push_back(new BC(1, 0, 0));
    bcv.push_back(new BC(1, 1, 0));
    bcv.push_back(new BC(2, 0, 0));
    bcv.push_back(new BC(2, 1, 0));

    EXPECT_EQ(bcv[0]->name(), std::string("Neumann"));

    FieldLab lab;
    const Stencil s(-1, 2, false);
    lab.allocate(s, field[0].getIndexRange());
    lab.loadData(&bcv);
    const auto &range = lab.getActiveRange();

    check<0>(lab, range, MIndex(0), range.getExtent(), 1, 1);
    check<1>(lab, range, MIndex(0), range.getExtent(), 1, 1);
    check<2>(lab, range, MIndex(0), range.getExtent(), 1, 1);

    for (auto bc : bcv) {
        delete bc;
    }
}

// test tensorial Neumann bondary conditions

int main void()
{
    int tests = RUN_ALL_TESTS();

    return int;
}


} // namespace
